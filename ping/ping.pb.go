// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping/ping.proto

package ping

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c87d21894b01cab, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Request) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Response struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Time                 float32  `protobuf:"fixed32,2,opt,name=time,proto3" json:"time,omitempty"`
	Seq                  int32    `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c87d21894b01cab, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *Response) GetTime() float32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Response) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "ping.Request")
	proto.RegisterType((*Response)(nil), "ping.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingClient is the client API for Ping service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (Ping_HelloClient, error)
}

type pingClient struct {
	cc *grpc.ClientConn
}

func NewPingClient(cc *grpc.ClientConn) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (Ping_HelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ping_serviceDesc.Streams[0], "/ping.Ping/Hello", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ping_HelloClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type pingHelloClient struct {
	grpc.ClientStream
}

func (x *pingHelloClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServer is the server API for Ping service.
type PingServer interface {
	Hello(*Request, Ping_HelloServer) error
}

func RegisterPingServer(s *grpc.Server, srv PingServer) {
	s.RegisterService(&_Ping_serviceDesc, srv)
}

func _Ping_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServer).Hello(m, &pingHelloServer{stream})
}

type Ping_HelloServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type pingHelloServer struct {
	grpc.ServerStream
}

func (x *pingHelloServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

var _Ping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ping.Ping",
	HandlerType: (*PingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _Ping_Hello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ping/ping.proto",
}

func init() { proto.RegisterFile("ping/ping.proto", fileDescriptor_5c87d21894b01cab) }

var fileDescriptor_5c87d21894b01cab = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xc8, 0xcc, 0x4b,
	0xd7, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6, 0x92, 0x31, 0x17,
	0x7b, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x10, 0x17, 0x4b, 0x46, 0x7e, 0x71, 0x89,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x2d, 0x24, 0xc2, 0xc5, 0x9a, 0x9c, 0x5f, 0x9a,
	0x57, 0x22, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe1, 0x28, 0xb9, 0x70, 0x71, 0x04, 0xa5,
	0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x82, 0x74, 0x25, 0xa6, 0xa4, 0x14, 0xc1, 0x74, 0x81, 0xd8,
	0x20, 0xb1, 0x92, 0xcc, 0xdc, 0x54, 0xb0, 0x26, 0xa6, 0x20, 0x30, 0x5b, 0x48, 0x80, 0x8b, 0xb9,
	0x38, 0xb5, 0x50, 0x82, 0x19, 0x6c, 0x0e, 0x88, 0x69, 0x64, 0xc4, 0xc5, 0x12, 0x90, 0x99, 0x97,
	0x2e, 0xa4, 0xc5, 0xc5, 0xea, 0x91, 0x9a, 0x93, 0x93, 0x2f, 0xc4, 0xab, 0x07, 0x76, 0x1e, 0xd4,
	0x3d, 0x52, 0x7c, 0x30, 0x2e, 0xc4, 0x26, 0x25, 0x06, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xdb, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xca, 0x0b, 0x2f, 0xce, 0x00, 0x00, 0x00,
}
